<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Blog Title</title>
  <subtitle>This is a longer description about your blog.</subtitle>
  <link href="https://example.com/feed/feed.xml" rel="self" />
  <link href="https://example.com/" />
  <updated>2025-09-29T00:00:00Z</updated>
  <id>https://example.com/</id>
  <author>
    <name>Your Name</name>
  </author>
  <entry>
    <title>How to Monetize Your Website with Google AdSense: A Complete Guide</title>
    <link href="https://example.com/blog/4/" />
    <updated>2025-09-29T00:00:00Z</updated>
    <id>https://example.com/blog/4/</id>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you run a website or blog and want to turn your traffic into revenue, &lt;strong&gt;Google AdSense&lt;/strong&gt; is one of the most accessible monetization solutions. By displaying relevant ads on your site, you can earn money whenever visitors see or click those ads. But to make AdSense work well, you need more than just pasting ad code — you need smart placement, continuous optimization, and strict adherence to Google’s policies. In this guide, you&#39;ll learn the steps to get started, how to optimize performance, and how to avoid common pitfalls.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;1. Understand How Google AdSense Works&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ad Auctions &amp;amp; Relevance&lt;/strong&gt;&lt;br&gt;
Google runs real-time auctions to decide which ads appear. The bids from advertisers are matched with your site’s content relevance, visitor interests, location, and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Revenue Models: CPC &amp;amp; CPM&lt;/strong&gt;&lt;br&gt;
Most of your earnings will come from CPC (Cost Per Click) — you earn when someone clicks an ad. Some ad formats or markets also support CPM (Cost Per Mille, i.e. per 1,000 impressions).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google’s Revenue Share&lt;/strong&gt;&lt;br&gt;
Google retains a portion of ad revenue and pays you a percentage. The exact share depends on ad format, market, and account performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;2. Prepare Your Site for AdSense&lt;/h2&gt;
&lt;p&gt;To improve your chances of approval and good performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Publish Quality, Original Content&lt;/strong&gt;&lt;br&gt;
Upload several articles or pages with substantial content. Aim for consistency, usefulness, and originality rather than filler or duplicated text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Include Essential Pages&lt;/strong&gt;&lt;br&gt;
Add pages like &lt;em&gt;About&lt;/em&gt;, &lt;em&gt;Contact&lt;/em&gt;, &lt;em&gt;Privacy Policy&lt;/em&gt;, and &lt;em&gt;Terms of Service&lt;/em&gt;. These boost site trust and compliance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clean Navigation &amp;amp; Layout&lt;/strong&gt;&lt;br&gt;
Make sure menus, sidebars, and internal links are working well. Avoid broken links or confusing UI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stabilize Traffic &amp;amp; Domain Age&lt;/strong&gt;&lt;br&gt;
While AdSense doesn&#39;t enforce a strict minimum traffic, having some steady visitor flow helps. Many websites wait until they have consistent traffic for weeks or months before applying.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Follow Content Policies&lt;/strong&gt;&lt;br&gt;
Ensure you don’t host prohibited content (copyright violations, adult content, hate speech, etc.). Also, do not encourage invalid clicks. Abide by AdSense’s program policies at all times.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once your site is polished and compliant, you can apply for AdSense and place a verification code (provided by Google) to confirm ownership.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;3. Set Up Ad Units &amp;amp; Place Ads Strategically&lt;/h2&gt;
&lt;p&gt;After approval, you’ll want to add ad units to your site. But where you place them matters a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Responsive Ad Units&lt;/strong&gt;&lt;br&gt;
Use ad units that auto-adjust to different devices (desktop, tablet, mobile).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Different Ad Types to Try&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display ads&lt;/li&gt;
&lt;li&gt;In-article (in-feed) ads&lt;/li&gt;
&lt;li&gt;Native ads&lt;/li&gt;
&lt;li&gt;Link units&lt;/li&gt;
&lt;li&gt;Matched content (if eligible)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ad Placement Best Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Place some ads &lt;em&gt;above the fold&lt;/em&gt; so they’re visible without scrolling.&lt;/li&gt;
&lt;li&gt;Try embedding an ad within the content (between paragraphs), but don’t overdo it.&lt;/li&gt;
&lt;li&gt;Use sidebar or footer spots, but ensure ads aren’t buried or ignored.&lt;/li&gt;
&lt;li&gt;Don’t overcrowd a page with too many ads.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A/B Testing&lt;/strong&gt;&lt;br&gt;
Use AdSense experiments or your own tests to compare different sizes, placements, or ad types. See what yields the best click-through rate and revenue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;4. Optimize Your Earnings&lt;/h2&gt;
&lt;p&gt;To increase your AdSense revenue over time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Target Higher-Value Topics / Niches&lt;/strong&gt;&lt;br&gt;
Some subjects like finance, health, legal, software, and business attract higher CPCs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhance Content Quality &amp;amp; Engagement&lt;/strong&gt;&lt;br&gt;
The more time users spend on your pages and the more pages they browse, the better the ad performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improve Site Speed &amp;amp; Performance&lt;/strong&gt;&lt;br&gt;
Use image optimization, lazy loading, browser caching, clean code, and possibly a CDN to reduce load times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Block Low-Value or Intrusive Ads&lt;/strong&gt;&lt;br&gt;
Use AdSense settings to block categories or advertisers that don’t serve your audience well or that degrade user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Link With Google Analytics&lt;/strong&gt;&lt;br&gt;
By integrating AdSense and Analytics, you can see which pages bring revenue and how users behave, then optimize accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor &amp;amp; Iterate&lt;/strong&gt;&lt;br&gt;
Regularly check your performance dashboard. Identify underperforming ad units or pages, and make improvements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;5. Stay Compliant &amp;amp; Avoid Penalties&lt;/h2&gt;
&lt;p&gt;AdSense has strict rules. Violations can lead to demonetization or account suspension.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Never Click Your Own Ads&lt;/strong&gt;&lt;br&gt;
Don’t click on any ad on your own site and don’t ask others to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Avoid Misleading / Deceptive Layouts&lt;/strong&gt;&lt;br&gt;
Ads must be clearly distinguishable from content. Don’t cloak ads as buttons or navigation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don’t Overload Pages with Ads&lt;/strong&gt;&lt;br&gt;
Too many ads can breach policy or annoy readers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep Track of Policy Updates&lt;/strong&gt;&lt;br&gt;
Google updates its rules periodically—check the AdSense policy center often.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Watch Invalid Traffic&lt;/strong&gt;&lt;br&gt;
Avoid traffic from bots, click farms, or suspicious sources. Such traffic may be flagged as invalid.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;6. Diversify &amp;amp; Scale Your Revenue Streams&lt;/h2&gt;
&lt;p&gt;Relying solely on AdSense is risky. As your site grows, expand revenue sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Supplemental Ad Networks&lt;/strong&gt;&lt;br&gt;
Use other networks like Media.net, Ezoic, or others to fill in revenue gaps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direct Advertising / Sponsorships&lt;/strong&gt;&lt;br&gt;
Sell ad space directly to brands in your niche at negotiated rates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Affiliate Marketing&lt;/strong&gt;&lt;br&gt;
Promote products or services via affiliate links and earn commissions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Digital Products / Subscriptions&lt;/strong&gt;&lt;br&gt;
Launch e-books, online courses, or premium memberships.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;7. Set Realistic Expectations &amp;amp; Plan Growth&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the early stages, your AdSense earnings might be small (a few dollars per month).&lt;/li&gt;
&lt;li&gt;As your traffic scales into thousands or tens of thousands of pageviews, your earnings can grow.&lt;/li&gt;
&lt;li&gt;Success typically doesn’t come overnight. It takes continuous content creation, testing, and optimization.&lt;/li&gt;
&lt;li&gt;Always prioritize your readers’ experience—ads should support the content, not dominate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Monetizing your website with Google AdSense is a practical and scalable method, but it’s not a “set it and forget it” solution. To earn steadily, you need strategic planning, smart implementation, ongoing optimization, and strong compliance with AdSense policies. Over time, as your traffic and content quality grows, combining AdSense with other monetization methods can help you build a robust and sustainable income stream.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Eleventy: A Modern and Flexible Static Site Generator</title>
    <link href="https://example.com/blog/3/" />
    <updated>2025-09-26T00:00:00Z</updated>
    <id>https://example.com/blog/3/</id>
    <content type="html">&lt;h2&gt;What Is Eleventy?&lt;/h2&gt;
&lt;p&gt;Eleventy, often abbreviated as 11ty, is an open-source static site generator written in JavaScript. Unlike many modern frameworks, Eleventy doesn&#39;t enforce the use of a specific frontend framework, making it a &amp;quot;framework-agnostic&amp;quot; tool. This approach allows developers to create static websites using their preferred technologies without being tied to a particular ecosystem.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Key Features of Eleventy&lt;/h2&gt;
&lt;p&gt;1. Multiple Template Language Support&lt;/p&gt;
&lt;p&gt;Eleventy stands out by supporting a wide array of templating languages, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown&lt;/li&gt;
&lt;li&gt;Liquid&lt;/li&gt;
&lt;li&gt;Nunjucks&lt;/li&gt;
&lt;li&gt;Handlebars&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;HAML&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;Pug&lt;/li&gt;
&lt;li&gt;EJS&lt;/li&gt;
&lt;li&gt;Mustache&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This flexibility allows developers to choose the templating language that best fits their project&#39;s needs or their personal preferences.&lt;/p&gt;
&lt;p&gt;2. Zero Configuration by Default&lt;/p&gt;
&lt;p&gt;Eleventy is designed to work out of the box with minimal setup. Developers can start building their site immediately without the need for complex configurations. This simplicity is particularly beneficial for beginners or those looking to quickly prototype ideas.&lt;/p&gt;
&lt;p&gt;3. Fast Build Times&lt;/p&gt;
&lt;p&gt;Performance is a core focus of Eleventy. The generator is optimized for speed, ensuring that even large websites with numerous pages are built efficiently. This results in faster development cycles and improved deployment times.&lt;/p&gt;
&lt;p&gt;4. Flexible Data Handling&lt;/p&gt;
&lt;p&gt;Eleventy allows developers to integrate various data sources into their sites. Whether it&#39;s JSON files, APIs, or other data formats, Eleventy can process and inject this data into templates, enabling dynamic content generation within static sites.&lt;/p&gt;
&lt;p&gt;5. Incremental Builds&lt;/p&gt;
&lt;p&gt;With Eleventy&#39;s incremental build feature, only the pages that have changed are rebuilt, rather than the entire site. This approach significantly reduces build times, especially for large projects, and enhances development efficiency.&lt;/p&gt;
&lt;p&gt;6. Extensive Plugin Ecosystem&lt;/p&gt;
&lt;p&gt;Eleventy boasts a rich ecosystem of plugins that extend its functionality. From image optimization to SEO enhancements, these plugins allow developers to add features to their sites without reinventing the wheel.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why Choose Eleventy?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: Eleventy&#39;s straightforward setup and minimal configuration make it accessible for developers of all skill levels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Optimized build processes and fast site generation ensure that Eleventy-powered websites are both quick to develop and to load.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: The support for multiple templating languages and data sources provides developers with the freedom to structure their projects as they see fit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: As an open-source project, Eleventy benefits from a vibrant community that contributes to its growth and offers support through forums and documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Getting Started with Eleventy&lt;/h2&gt;
&lt;p&gt;To begin using Eleventy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install Node.js&lt;/strong&gt;: Ensure that Node.js is installed on your system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Initialize the Project&lt;/strong&gt;: Run the following command in the directory where you want to store your project. This will generate a default package.json file.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;Install Eleventy&lt;/strong&gt;: Add Eleventy as a development dependency:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev @11ty/eleventy&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;strong&gt;Run Eleventy&lt;/strong&gt;: After installation, you can build a static site using the following command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx @11ty/eleventy&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;strong&gt;Start a local development server&lt;/strong&gt;: To start a local development server that watches for file changes and refreshes instantly, use:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx @11ty/eleventy &lt;span class=&quot;token parameter variable&quot;&gt;--serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Eleventy offers a powerful yet simple approach to building static websites. Its flexibility, performance, and ease of use make it an excellent choice for developers looking to create fast, customizable sites without the overhead of complex frameworks. Whether you&#39;re building a personal blog, a portfolio, or a documentation site, Eleventy provides the tools and flexibility to bring your vision to life.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to Build a High-Performance Blog with Eleventy</title>
    <link href="https://example.com/blog/2/" />
    <updated>2025-09-26T00:00:00Z</updated>
    <id>https://example.com/blog/2/</id>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you’re looking to build a blog that’s fast, lightweight, and easy to maintain, Eleventy (also known as 11ty) is an excellent choice. It lets you write content in Markdown, combine that with flexible templates, and generate a static site you can deploy anywhere. In this article, I’ll walk you through the essential steps, best practices, and tips to build your Eleventy blog in a way that’s optimized for performance and SEO.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What Is Eleventy and Why Use It?&lt;/h2&gt;
&lt;p&gt;Eleventy is a static site generator built in JavaScript. It transforms content and templates into static HTML files at build time, rather than generating pages dynamically on each request. This leads to faster page loads, simpler hosting, and lower maintenance.&lt;/p&gt;
&lt;p&gt;Key advantages of Eleventy include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support for many template languages (Markdown, Nunjucks, Liquid, etc.)&lt;/li&gt;
&lt;li&gt;Minimal required configuration — it works out of the box&lt;/li&gt;
&lt;li&gt;Flexibility to structure your project as you like&lt;/li&gt;
&lt;li&gt;Good support for SEO (metadata, sitemap, clean URLs)&lt;/li&gt;
&lt;li&gt;Easy deployment on static hosts or CDNs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because pages are pre-rendered, there’s no backend database or server logic involved, which reduces complexity and improves security.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Project Structure &amp;amp; Setup&lt;/h2&gt;
&lt;p&gt;Here’s a typical folder layout for an Eleventy blog:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;my-blog/
├── src/
│   ├── posts/
│   │   ├── first-post.md
│   │   └── another-post.md
│   ├── about.md
│   └── index.md
├── _includes/
│   └── layouts/
│       └── base.njk
├── .eleventy.js
└── package.json&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;src/ holds your content (Markdown files).&lt;/li&gt;
&lt;li&gt;posts/ can hold your blog posts.&lt;/li&gt;
&lt;li&gt;_includes/layouts/ holds shared layout templates (e.g. base or post layout).&lt;/li&gt;
&lt;li&gt;.eleventy.js is your configuration file.&lt;/li&gt;
&lt;li&gt;package.json to manage dependencies and scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A minimal .eleventy.js might look like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_includes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dist&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;markdownTemplateEngine&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;njk&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In your layout template (e.g. base.njk), you’d include standard HTML head tags, metadata, and placeholders for content and SEO meta tags.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Writing Blog Posts with SEO in Mind&lt;/h2&gt;
&lt;p&gt;Use front matter in your Markdown files to define metadata. Example:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;title: &quot;My First Blog Post&quot;
date: 2025-09-26
tags:
  - eleventy
  - static site
description: &quot;An introduction to building a blog using Eleventy.&quot;
layout: layouts/base.njk&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;#&lt;/span&gt; My First Blog Post&lt;/span&gt;

This is where your post content goes.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some tips for SEO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always include a concise description (meta description).&lt;/li&gt;
&lt;li&gt;Use meaningful, keyword-rich post titles.&lt;/li&gt;
&lt;li&gt;Use headings (##, ###) properly to structure content.&lt;/li&gt;
&lt;li&gt;Add alt attributes to images.&lt;/li&gt;
&lt;li&gt;Use internal linking (link between posts).&lt;/li&gt;
&lt;li&gt;Generate a sitemap and use robots.txt to guide search engines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eleventy has plugins (or you can write your own filters) to generate a sitemap.xml and RSS feed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Listing and Pagination&lt;/h2&gt;
&lt;p&gt;To show a list of blog posts, you can create an index page (e.g. src/index.md) or a custom template that loops through all posts. Eleventy supports collections, which lets you group content — for example, a collection(&amp;quot;posts&amp;quot;) that contains all your posts sorted by date.&lt;/p&gt;
&lt;p&gt;To implement pagination (e.g. showing 10 posts per page), Eleventy supports built-in pagination features so you can automatically split long lists into pages.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Enhancements &amp;amp; Plugins&lt;/h2&gt;
&lt;p&gt;To improve your blog further, consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Syntax highlighting&lt;/strong&gt; for code blocks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image optimization&lt;/strong&gt; (automatically resizing, converting to WebP/AVIF)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compressed CSS &amp;amp; JS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schema.org / JSON-LD&lt;/strong&gt; metadata for rich results&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open Graph / Twitter Cards&lt;/strong&gt; metadata for social sharing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RSS / Atom feeds&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt; (via client-side search or integrating with services)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many of these can be achieved with Eleventy plugins or custom scripts in your build process.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Deployment Strategies&lt;/h2&gt;
&lt;p&gt;Because the result is static HTML, you can deploy your blog on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Pages&lt;/li&gt;
&lt;li&gt;Netlify&lt;/li&gt;
&lt;li&gt;Vercel&lt;/li&gt;
&lt;li&gt;Any static file hosting or CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You typically set up a build pipeline (e.g. GitHub Actions, Netlify build, or Vercel) that runs eleventy (or npx @11ty/eleventy) to regenerate the site upon changes.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Tips for Performance &amp;amp; SEO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Minimize the use of heavy JavaScript; where needed, defer or lazy-load it.&lt;/li&gt;
&lt;li&gt;Use caching headers (long cache lifetime) for static assets.&lt;/li&gt;
&lt;li&gt;Preload or prefetch critical assets.&lt;/li&gt;
&lt;li&gt;Use lazy loading for images.&lt;/li&gt;
&lt;li&gt;Keep your HTML small and avoid unnecessary markup.&lt;/li&gt;
&lt;li&gt;Update and publish new content regularly — search engines favor fresher content.&lt;/li&gt;
&lt;li&gt;Monitor site performance (e.g. Lighthouse scores) and optimize bottlenecks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sample Article Walkthrough&lt;/h2&gt;
&lt;p&gt;As an example, here’s how you’d create a new blog post:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a new Markdown file: src/posts/2025-10-01-intro-to-eleventy.md.&lt;/li&gt;
&lt;li&gt;Add front matter with title, date, description, tags, layout.&lt;/li&gt;
&lt;li&gt;Write the article content using headings, images, code blocks, links.&lt;/li&gt;
&lt;li&gt;Push to your git repository (with build integration).&lt;/li&gt;
&lt;li&gt;Your hosting platform runs a new build and publishes the updated site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because everything is static, the new HTML is served instantly without server processing.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Eleventy strikes a sweet balance between simplicity and power. You get the control and flexibility to structure your site your own way, while benefiting from performance, security, and SEO advantages. As your blog grows, you can layer on enhancements like image processing, search, or custom data sources, but the foundation remains clean and maintainable.&lt;/p&gt;
&lt;p&gt;If you follow good content practices, keep your site lean, and leverage Eleventy’s features smartly, you’ll have a fast, SEO-friendly blog that’s a pleasure to build, maintain, and read.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to host a static website for free on GitHub Pages</title>
    <link href="https://example.com/blog/1/" />
    <updated>2025-09-26T00:00:00Z</updated>
    <id>https://example.com/blog/1/</id>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you have a simple website built with HTML, CSS, and JavaScript (or generated output from a static site generator), you can host it completely &lt;strong&gt;for free&lt;/strong&gt; using GitHub Pages. No server management, no backend, no hosting bills. In this article, you’ll learn how to get your static site online using GitHub Pages, configure a custom domain, optimize for SEO, and maintain your site efficiently.&lt;/p&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://example.com/blog/1/Vkn2SuY5SQ-1000.avif 1000w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://example.com/blog/1/Vkn2SuY5SQ-1000.webp 1000w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://example.com/blog/1/Vkn2SuY5SQ-1000.jpeg&quot; alt=&quot;GitHub Pages&quot; width=&quot;1000&quot; height=&quot;636&quot;&gt;&lt;/picture&gt;
&lt;hr&gt;
&lt;h2&gt;What Is GitHub Pages?&lt;/h2&gt;
&lt;p&gt;GitHub Pages is a static site hosting service offered by GitHub. It takes the static files (HTML, CSS, JavaScript) from a repository and publishes them as a website. It supports optional build steps (such as using Jekyll) and enables global delivery via HTTPS.&lt;/p&gt;
&lt;p&gt;There are two main types of GitHub Pages sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User / organization site&lt;/strong&gt; — your repository must be named &lt;code&gt;username.github.io&lt;/code&gt;, and the site is published at &lt;code&gt;https://username.github.io&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project site&lt;/strong&gt; — any repository can publish a site under &lt;code&gt;https://username.github.io/repository-name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub Pages is available for public repositories on GitHub Free, and supports HTTPS, custom domains, and automatic build/deployment from branches.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Why Choose GitHub Pages?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It’s &lt;strong&gt;free&lt;/strong&gt; for static content.&lt;/li&gt;
&lt;li&gt;Easy versioning and deployment via Git.&lt;/li&gt;
&lt;li&gt;Built-in support for Jekyll (Markdown + templating).&lt;/li&gt;
&lt;li&gt;You can push updates and have them go live automatically.&lt;/li&gt;
&lt;li&gt;Ability to use your own domain with HTTPS.&lt;/li&gt;
&lt;li&gt;Great choice for portfolios, documentation, blogs (static), project sites, and marketing pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, note that GitHub Pages only supports static content — you cannot run server-side code (e.g. PHP, Node, Python backend) or databases natively.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Step-by-Step: Publishing Your Static Website&lt;/h2&gt;
&lt;h3&gt;1. Create (or use) a GitHub account&lt;/h3&gt;
&lt;p&gt;If you don’t already have one, sign up on GitHub and verify your email.&lt;/p&gt;
&lt;h3&gt;2. Create a repository for your site&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For a &lt;strong&gt;user/organization site&lt;/strong&gt;, name the repo exactly &lt;code&gt;username.github.io&lt;/code&gt; (replace &lt;code&gt;username&lt;/code&gt; with your GitHub username).&lt;/li&gt;
&lt;li&gt;For a &lt;strong&gt;project site&lt;/strong&gt;, choose any repository name.&lt;/li&gt;
&lt;li&gt;Make the repository &lt;strong&gt;public&lt;/strong&gt; (free GitHub Pages requires public repos for publishing).&lt;/li&gt;
&lt;li&gt;Optionally initialize with a &lt;code&gt;README.md&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. Add your website files&lt;/h3&gt;
&lt;p&gt;You need at minimum an &lt;code&gt;index.html&lt;/code&gt; (or &lt;code&gt;index.md&lt;/code&gt;) file in the root (or publishing folder). You can use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web interface&lt;/strong&gt;: upload your HTML, CSS, JS, images via GitHub’s “Add file → Upload files”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Git&lt;/strong&gt;: clone the repository, add your site files, commit, and push.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ensure your internal links are relative, and your assets (CSS, JS, images) are correctly referenced.&lt;/p&gt;
&lt;h3&gt;4. Enable GitHub Pages in settings&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go to your repository’s &lt;strong&gt;Settings → Pages&lt;/strong&gt; (or “Code and automation → Pages”).&lt;/li&gt;
&lt;li&gt;Under “Build and deployment”, select a &lt;strong&gt;branch&lt;/strong&gt; (commonly &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;) and choose the folder (&lt;code&gt;/&lt;/code&gt; root or a subfolder like &lt;code&gt;/docs&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Save that configuration.&lt;/li&gt;
&lt;li&gt;Wait a few minutes for GitHub to build and publish your site.&lt;/li&gt;
&lt;li&gt;Your site will be available at &lt;code&gt;https://username.github.io&lt;/code&gt; or &lt;code&gt;https://username.github.io/repo-name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. Use a custom domain (optional)&lt;/h3&gt;
&lt;p&gt;To use your own domain (e.g. &lt;code&gt;www.example.com&lt;/code&gt;), do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In your repository’s Pages settings, add the custom domain (e.g. &lt;code&gt;www.example.com&lt;/code&gt;). GitHub will expect a file &lt;code&gt;CNAME&lt;/code&gt; containing that domain in the publishing branch.&lt;/li&gt;
&lt;li&gt;In your DNS settings:
&lt;ul&gt;
&lt;li&gt;For a subdomain (&lt;code&gt;www&lt;/code&gt;), point a &lt;strong&gt;CNAME&lt;/strong&gt; record to &lt;code&gt;username.github.io&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For a root/apex domain, add &lt;strong&gt;A&lt;/strong&gt; records pointing to GitHub Pages’ IP addresses (e.g. &lt;code&gt;185.199.108.153&lt;/code&gt;, &lt;code&gt;185.199.109.153&lt;/code&gt;, &lt;code&gt;185.199.110.153&lt;/code&gt;, &lt;code&gt;185.199.111.153&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wait for DNS propagation (can take minutes to hours).&lt;/li&gt;
&lt;li&gt;In GitHub settings, enable “Enforce HTTPS” (if available) for your custom domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;6. Update and maintain your site&lt;/h3&gt;
&lt;p&gt;Whenever you want to change content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Edit files locally or via GitHub interface.&lt;/li&gt;
&lt;li&gt;Commit and push changes to the publishing branch.&lt;/li&gt;
&lt;li&gt;GitHub Pages will automatically rebuild and republish your site (usually within a few minutes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are using a static site generator (like Jekyll, Hugo, etc.), you may build locally and push the generated output, or use a GitHub Actions workflow to build and deploy.&lt;/p&gt;
&lt;h3&gt;7. Disable Jekyll (if needed)&lt;/h3&gt;
&lt;p&gt;If you don’t want GitHub to process your site with Jekyll (for example, if you&#39;re using another build tool), you can add an empty file named &lt;code&gt;.nojekyll&lt;/code&gt; in the root of your publishing branch to disable Jekyll processing.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;SEO &amp;amp; Best Practice Tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Give each page a &lt;strong&gt;unique title&lt;/strong&gt; and &lt;strong&gt;meta description&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use proper header tags (H1, H2, H3) semantically.&lt;/li&gt;
&lt;li&gt;Ensure your site is &lt;strong&gt;mobile-responsive&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;alt&lt;/strong&gt; text on images for accessibility and SEO.&lt;/li&gt;
&lt;li&gt;Generate and publish&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>